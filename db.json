{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/Hacker/source/images/icon-heart.svg","path":"images/icon-heart.svg","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/header.styl","path":"css/components/header.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/base/normalize.css","path":"css/base/normalize.css","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/article.styl","path":"css/components/article.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/footer.styl","path":"css/components/footer.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/icon.styl","path":"css/components/icon.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/layout.styl","path":"css/components/layout.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/pagination.styl","path":"css/components/pagination.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/responsive.styl","path":"css/components/responsive.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/syntax.styl","path":"css/components/syntax.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/archive.styl","path":"css/components/archive.styl","modified":0,"renderable":1}],"Cache":[{"_id":"themes/Hacker/README.md","hash":"9abc3b8feafc9d41b58f512c5edd70b313d31223","modified":1482692054000},{"_id":"themes/Hacker/_config.yml","hash":"896e4e7360396e1c09e21ccb3d881d4bbf727c4a","modified":1482692054000},{"_id":"themes/Hacker/README_zh-CN.md","hash":"04e4994e2967260dc6f64dcd11534a39b0697119","modified":1482692054000},{"_id":"source/_posts/2017-Preview.md","hash":"7ab93e3fc599e15ed0fb3e99dc6f0eba19ac8e60","modified":1482693851000},{"_id":"source/_posts/Look-Back-2016-Tech.md","hash":"b4f971aa87621fd438f324dc20c537d8b428884e","modified":1482693031000},{"_id":"source/_posts/wechat_payment_adventure.md","hash":"458b750e78fae2f8620964050b4cf119bfcc10ae","modified":1484062813000},{"_id":"source/_posts/Look-Back-2016-read.md","hash":"814154d78f7dafb83d45381f324a65284e321cbe","modified":1482692054000},{"_id":"themes/Hacker/languages/default.yml","hash":"4571e0216ed876cd8240ccbb92c9302688f82f5b","modified":1482692054000},{"_id":"themes/Hacker/languages/zh-CN.yml","hash":"cbb421e575c3a50138bd3b26834b547d50627369","modified":1482692054000},{"_id":"themes/Hacker/layout/index.ejs","hash":"1d2c487a95d25e763b5f7e004194eb6ee6b18135","modified":1482692054000},{"_id":"themes/Hacker/layout/archive.ejs","hash":"2238cbe29009aafb16969d2c70dceb3f71772123","modified":1482692054000},{"_id":"themes/Hacker/layout/page.ejs","hash":"84e00bbcc643dff4bd02880b3bbea658f510835f","modified":1482692054000},{"_id":"themes/Hacker/layout/layout.ejs","hash":"341e77b5f07457e4ccd69634f511da05a5d89f18","modified":1482692054000},{"_id":"themes/Hacker/layout/post.ejs","hash":"84e00bbcc643dff4bd02880b3bbea658f510835f","modified":1482692054000},{"_id":"themes/Hacker/layout/components/archive.ejs","hash":"1f79ebaf52b8229cf5c58bb8325cf0177859a05c","modified":1482692054000},{"_id":"themes/Hacker/layout/components/article.ejs","hash":"0bb15452f6d195f8df784b6739c682df1f6739af","modified":1482692054000},{"_id":"themes/Hacker/layout/components/googleanalytics.ejs","hash":"fa11251ace0fc61cbcffb74f32fbf5bdbb201ff2","modified":1482692054000},{"_id":"themes/Hacker/layout/components/comment.ejs","hash":"9a0c64143935d20b68e48625d405251c9dd726ac","modified":1482692054000},{"_id":"themes/Hacker/layout/components/footer.ejs","hash":"538795f4af3a98e824aefc4b68a1bcd210c091e9","modified":1482692054000},{"_id":"themes/Hacker/layout/components/pagination.ejs","hash":"4ab5e3b0239e467923a0f91c771bcc9ee7889cfe","modified":1482692054000},{"_id":"themes/Hacker/layout/components/head.ejs","hash":"10475fdfc513c9380f18d034e15b3b051c8e9269","modified":1482692054000},{"_id":"themes/Hacker/layout/components/header.ejs","hash":"929a8eafa278d49c2f41d3581e2608eca80d7856","modified":1482692054000},{"_id":"themes/Hacker/source/images/icon-heart.svg","hash":"ec483e96c88eea013fd8ac71a34a875107397f43","modified":1482692054000},{"_id":"themes/Hacker/source/css/style.styl","hash":"d1e5361c12d3140b2d524f8e97c2f9e0f29b85ee","modified":1482692054000},{"_id":"themes/Hacker/source/css/components/header.styl","hash":"fa5e6d715d288a327406df78225284c70530cb98","modified":1482692054000},{"_id":"themes/Hacker/source/css/base/normalize.css","hash":"e58275a588bb631a37a2988145eea231ed23176b","modified":1482692054000},{"_id":"themes/Hacker/source/css/components/article.styl","hash":"e99f13c6744ddaa7f7bfcf0662e4dc6840fae8fa","modified":1482692054000},{"_id":"themes/Hacker/source/css/components/footer.styl","hash":"80ef890252d31d3bbfe71740fdcfc54ae14cad8e","modified":1482692054000},{"_id":"themes/Hacker/source/css/components/icon.styl","hash":"8da3ff5b6cd1609fdfe0c564d47391367abc8808","modified":1482692054000},{"_id":"themes/Hacker/source/css/components/layout.styl","hash":"73c1688b95b20cd67669bc5567420f5be8448c9f","modified":1482692054000},{"_id":"themes/Hacker/source/css/components/pagination.styl","hash":"c20a9920bb444c22b20e588f97eba4e03f09a439","modified":1482692054000},{"_id":"themes/Hacker/source/css/components/responsive.styl","hash":"053e7ec4c22845422440660b7e1d6b0dea5b4fbd","modified":1482692054000},{"_id":"themes/Hacker/source/css/components/syntax.styl","hash":"68b7deadab1ac13603eb5e812e1060db25227fd0","modified":1482692054000},{"_id":"themes/Hacker/source/css/components/archive.styl","hash":"de701a1dee6e870140565044a08c2c45cfcd4bc3","modified":1482692054000}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"2017 Preview","date":"2016-12-25T19:16:49.000Z","layout":"true","_content":"\n2017年的展望，概括来说是：十二本书，一套产品，一组乐高。\n\n<!-- more -->\n\n**十二本书**\n指的是至少每个月一本。初步计划上半年如下：《人类简史》、《必然》、《白夜行》、《重构》、《机器学习》、《智能时代》。\n\n**一套产品**\n还不知道是什么，但是一定要有一款自己的产品出来。\n\n**一组乐高**\n这是个新坑。打算从街景系列开始玩起。我对乐高的喜爱好像只是对建筑类的，星战啊什么的完全没有兴趣。\n","source":"_posts/2017-Preview.md","raw":"---\ntitle: 2017 Preview\ndate: 2016-12-26 03:16:49\ntags: [life, tech, reading, lego]\nlayout: true\n---\n\n2017年的展望，概括来说是：十二本书，一套产品，一组乐高。\n\n<!-- more -->\n\n**十二本书**\n指的是至少每个月一本。初步计划上半年如下：《人类简史》、《必然》、《白夜行》、《重构》、《机器学习》、《智能时代》。\n\n**一套产品**\n还不知道是什么，但是一定要有一款自己的产品出来。\n\n**一组乐高**\n这是个新坑。打算从街景系列开始玩起。我对乐高的喜爱好像只是对建筑类的，星战啊什么的完全没有兴趣。\n","slug":"2017-Preview","published":1,"updated":"2016-12-25T19:24:11.000Z","comments":1,"photos":[],"link":"","_id":"cixr90u590000vas6hkig604o","content":"<p>2017年的展望，概括来说是：十二本书，一套产品，一组乐高。</p>\n<a id=\"more\"></a>\n<p><strong>十二本书</strong><br>指的是至少每个月一本。初步计划上半年如下：《人类简史》、《必然》、《白夜行》、《重构》、《机器学习》、《智能时代》。</p>\n<p><strong>一套产品</strong><br>还不知道是什么，但是一定要有一款自己的产品出来。</p>\n<p><strong>一组乐高</strong><br>这是个新坑。打算从街景系列开始玩起。我对乐高的喜爱好像只是对建筑类的，星战啊什么的完全没有兴趣。</p>\n","excerpt":"<p>2017年的展望，概括来说是：十二本书，一套产品，一组乐高。</p>","more":"<p><strong>十二本书</strong><br>指的是至少每个月一本。初步计划上半年如下：《人类简史》、《必然》、《白夜行》、《重构》、《机器学习》、《智能时代》。</p>\n<p><strong>一套产品</strong><br>还不知道是什么，但是一定要有一款自己的产品出来。</p>\n<p><strong>一组乐高</strong><br>这是个新坑。打算从街景系列开始玩起。我对乐高的喜爱好像只是对建筑类的，星战啊什么的完全没有兴趣。</p>"},{"title":"2016 技术","date":"2016-12-25T18:56:58.000Z","layout":"true","_content":"\n2016 年技术上最大的收获是 React 和 React Native。踩过一些坑，趟过一些雷。\n\n<!-- more -->\n\nReact 和 React Native 是去年新接触的东西。这两种技术已经存在有一些时间了，之前也有听说，但是真正拿到项目里面用还是第一次。这里不说具体技术细节，以后有时间开专题来说吧。其实主要也是现在用的还不够精。\n\n这一年总的来说技术上乏善可陈，列举一下一些教训吧。\n\n**产品**\n真没想到，作为一个自称半条产品狗的人，居然在这上面会摔跟头。实话说，过去还是太偏技术，知道产品很重要，但由于有专门的人做产品经理，反而自己并没有花时间在产品上，这是错误的。很多事情看起来很容易做，评价别人的作品也很容易，但是一旦自己经历一下就知道并不是那么容易了。\n\n**复用**\n别为了图一时之快而用 Copy Paste 做复用。组件化，一定要组件化。这个坑真是踩的有够低智的。归根结底还是懒，然而懒一时，后面总要还的啊。技术债的利息是最高的。\n\n**轮子**\n不要重复造轮子，警世恒言啊。老觉得别人的代码丑陋，应该自己搞一套出来。结果呢，为了赶工期（同上条，deadline is evil...）而“不得不”加各种补丁，最后发现代码还不如别人写的好看呢。\n\n**专注**\n其实一切的根源还是不够专注。不专注就浅尝辄止、乱打补丁、只考虑眼前不想象未来。专注于一件事情并把它做好很重要。\n","source":"_posts/Look-Back-2016-Tech.md","raw":"---\ntitle: \"2016 技术\"\ndate: 2016-12-26 02:56:58\ntags: [tech]\nlayout: true\n---\n\n2016 年技术上最大的收获是 React 和 React Native。踩过一些坑，趟过一些雷。\n\n<!-- more -->\n\nReact 和 React Native 是去年新接触的东西。这两种技术已经存在有一些时间了，之前也有听说，但是真正拿到项目里面用还是第一次。这里不说具体技术细节，以后有时间开专题来说吧。其实主要也是现在用的还不够精。\n\n这一年总的来说技术上乏善可陈，列举一下一些教训吧。\n\n**产品**\n真没想到，作为一个自称半条产品狗的人，居然在这上面会摔跟头。实话说，过去还是太偏技术，知道产品很重要，但由于有专门的人做产品经理，反而自己并没有花时间在产品上，这是错误的。很多事情看起来很容易做，评价别人的作品也很容易，但是一旦自己经历一下就知道并不是那么容易了。\n\n**复用**\n别为了图一时之快而用 Copy Paste 做复用。组件化，一定要组件化。这个坑真是踩的有够低智的。归根结底还是懒，然而懒一时，后面总要还的啊。技术债的利息是最高的。\n\n**轮子**\n不要重复造轮子，警世恒言啊。老觉得别人的代码丑陋，应该自己搞一套出来。结果呢，为了赶工期（同上条，deadline is evil...）而“不得不”加各种补丁，最后发现代码还不如别人写的好看呢。\n\n**专注**\n其实一切的根源还是不够专注。不专注就浅尝辄止、乱打补丁、只考虑眼前不想象未来。专注于一件事情并把它做好很重要。\n","slug":"Look-Back-2016-Tech","published":1,"updated":"2016-12-25T19:10:31.000Z","comments":1,"photos":[],"link":"","_id":"cixr90u5e0001vas6zyk1wbew","content":"<p>2016 年技术上最大的收获是 React 和 React Native。踩过一些坑，趟过一些雷。</p>\n<a id=\"more\"></a>\n<p>React 和 React Native 是去年新接触的东西。这两种技术已经存在有一些时间了，之前也有听说，但是真正拿到项目里面用还是第一次。这里不说具体技术细节，以后有时间开专题来说吧。其实主要也是现在用的还不够精。</p>\n<p>这一年总的来说技术上乏善可陈，列举一下一些教训吧。</p>\n<p><strong>产品</strong><br>真没想到，作为一个自称半条产品狗的人，居然在这上面会摔跟头。实话说，过去还是太偏技术，知道产品很重要，但由于有专门的人做产品经理，反而自己并没有花时间在产品上，这是错误的。很多事情看起来很容易做，评价别人的作品也很容易，但是一旦自己经历一下就知道并不是那么容易了。</p>\n<p><strong>复用</strong><br>别为了图一时之快而用 Copy Paste 做复用。组件化，一定要组件化。这个坑真是踩的有够低智的。归根结底还是懒，然而懒一时，后面总要还的啊。技术债的利息是最高的。</p>\n<p><strong>轮子</strong><br>不要重复造轮子，警世恒言啊。老觉得别人的代码丑陋，应该自己搞一套出来。结果呢，为了赶工期（同上条，deadline is evil…）而“不得不”加各种补丁，最后发现代码还不如别人写的好看呢。</p>\n<p><strong>专注</strong><br>其实一切的根源还是不够专注。不专注就浅尝辄止、乱打补丁、只考虑眼前不想象未来。专注于一件事情并把它做好很重要。</p>\n","excerpt":"<p>2016 年技术上最大的收获是 React 和 React Native。踩过一些坑，趟过一些雷。</p>","more":"<p>React 和 React Native 是去年新接触的东西。这两种技术已经存在有一些时间了，之前也有听说，但是真正拿到项目里面用还是第一次。这里不说具体技术细节，以后有时间开专题来说吧。其实主要也是现在用的还不够精。</p>\n<p>这一年总的来说技术上乏善可陈，列举一下一些教训吧。</p>\n<p><strong>产品</strong><br>真没想到，作为一个自称半条产品狗的人，居然在这上面会摔跟头。实话说，过去还是太偏技术，知道产品很重要，但由于有专门的人做产品经理，反而自己并没有花时间在产品上，这是错误的。很多事情看起来很容易做，评价别人的作品也很容易，但是一旦自己经历一下就知道并不是那么容易了。</p>\n<p><strong>复用</strong><br>别为了图一时之快而用 Copy Paste 做复用。组件化，一定要组件化。这个坑真是踩的有够低智的。归根结底还是懒，然而懒一时，后面总要还的啊。技术债的利息是最高的。</p>\n<p><strong>轮子</strong><br>不要重复造轮子，警世恒言啊。老觉得别人的代码丑陋，应该自己搞一套出来。结果呢，为了赶工期（同上条，deadline is evil…）而“不得不”加各种补丁，最后发现代码还不如别人写的好看呢。</p>\n<p><strong>专注</strong><br>其实一切的根源还是不够专注。不专注就浅尝辄止、乱打补丁、只考虑眼前不想象未来。专注于一件事情并把它做好很重要。</p>"},{"title":"微信支付历险记","date":"2017-01-10T08:20:10.000Z","layout":"true","_content":"\n之前一直听说微信支付的 API 是个坑货，坑到有专门的封装支付的平台。这次自己体验了一下，果然很坑。做个笔记。\n\n<!-- more -->\n\n首先必须说一下，无论什么结果都返回 `200 OK` 是个很脑残的偷懒设计。\n\n**统一下单接口返回空**\n在调试统一下单接口的时候，发现微信返回 `200 OK` 但是不会去调用回调接口。这就有点尴尬了。我一直以为接口调用是成功的，只是回调接口没配置好（必须是外网服务器，所以用了第三方的 tunnel）。然而无论怎么试，外网接口都是通的。随后看文档发现，如果调用成功是应该返回 success 的，而不是空。这才想到会不会调用就是失败的。仔细看了一下代码，发现 `Java POJO -> XML` 的转化写的有问题。`XStream` 会自动给把下划线转义，变成俩下划线。而我为了简单，直接把 `POJO` 里的变量都按接口要求对应了（即按规范应该是 `totalFee` 的地方，都写了 `total_fee`）。重载了一下 `PrettyPrintWriter` 的 `encodeNode` 函数直接返回变量名，终于，看到返回内容了。\n\n坑点：失败了就不要返回 `200 OK` 嘛！返回 `200 OK` 也行，起码不要把错误扔掉嘛！另外，那个回调也并不是在统一下单接口调用的。文档写得不明不白。\n\n**统一下单接口签名错误**\n我出的问题是签名时没有对字符串做正确的编码处理。简单说，MD5Digest 接收的是一个字节数组，需要将字符串转换一下，转换时需要加入编码参数：\n```\nbyte[] sign = digest.digest(buffer.toString().getBytes()); // 老实说，这是一个非常弱智的错误\nbyte[] sign = digest.digest(buffer.toString().getBytes(\"UTF-8\"));\n```\n签名函数的主逻辑是这样的：\n```\n/**\n * Signs the given parameters according to wechat payment unfiedorder protocol.\n *\n * @param params the request parameters, key and sign are not included\n *               neither are the null/empty values\n */\npublic String sign(SortedMap params) {\n  // combine the parameters to get the string to be signed on\n  StringBuffer buffer = new StringBuffer();\n  Iterator iterator = params.entrySet().iterator();\n  while (iterator.hasNext()) {\n      Map.Entry entry = (Map.Entry) iterator.next();\n      String key = (String) entry.getKey();\n      String value = (String) entry.getValue();\n      buffer.append(key).append(\"=\").append(value).append(\"&\");\n  }\n\n  // append the wechat key\n  buffer.append(\"key=\").append(wechatKey);\n\n  byte[] sign = digest.digest(buffer.toString().getBytes(\"UTF-8\"));\n\n  // convert the byte array to hex string\n  StringBuffer hexString = new StringBuffer();\n  for (int i=0; i < sign.length; i++) {\n      String hex = Integer.toHexString(0xff & sign[i]);\n      if (hex.length() == 1) {\n          hexString.append('0');\n      }\n      hexString.append(hex);\n  }\n\n  // the result string must be upper case\n  return hexString.toString().toUpperCase();\n}\n```\n","source":"_posts/wechat_payment_adventure.md","raw":"---\ntitle: 微信支付历险记\ndate: 2017-1-10 16:20:10\ntags: [tech]\nlayout: true\n---\n\n之前一直听说微信支付的 API 是个坑货，坑到有专门的封装支付的平台。这次自己体验了一下，果然很坑。做个笔记。\n\n<!-- more -->\n\n首先必须说一下，无论什么结果都返回 `200 OK` 是个很脑残的偷懒设计。\n\n**统一下单接口返回空**\n在调试统一下单接口的时候，发现微信返回 `200 OK` 但是不会去调用回调接口。这就有点尴尬了。我一直以为接口调用是成功的，只是回调接口没配置好（必须是外网服务器，所以用了第三方的 tunnel）。然而无论怎么试，外网接口都是通的。随后看文档发现，如果调用成功是应该返回 success 的，而不是空。这才想到会不会调用就是失败的。仔细看了一下代码，发现 `Java POJO -> XML` 的转化写的有问题。`XStream` 会自动给把下划线转义，变成俩下划线。而我为了简单，直接把 `POJO` 里的变量都按接口要求对应了（即按规范应该是 `totalFee` 的地方，都写了 `total_fee`）。重载了一下 `PrettyPrintWriter` 的 `encodeNode` 函数直接返回变量名，终于，看到返回内容了。\n\n坑点：失败了就不要返回 `200 OK` 嘛！返回 `200 OK` 也行，起码不要把错误扔掉嘛！另外，那个回调也并不是在统一下单接口调用的。文档写得不明不白。\n\n**统一下单接口签名错误**\n我出的问题是签名时没有对字符串做正确的编码处理。简单说，MD5Digest 接收的是一个字节数组，需要将字符串转换一下，转换时需要加入编码参数：\n```\nbyte[] sign = digest.digest(buffer.toString().getBytes()); // 老实说，这是一个非常弱智的错误\nbyte[] sign = digest.digest(buffer.toString().getBytes(\"UTF-8\"));\n```\n签名函数的主逻辑是这样的：\n```\n/**\n * Signs the given parameters according to wechat payment unfiedorder protocol.\n *\n * @param params the request parameters, key and sign are not included\n *               neither are the null/empty values\n */\npublic String sign(SortedMap params) {\n  // combine the parameters to get the string to be signed on\n  StringBuffer buffer = new StringBuffer();\n  Iterator iterator = params.entrySet().iterator();\n  while (iterator.hasNext()) {\n      Map.Entry entry = (Map.Entry) iterator.next();\n      String key = (String) entry.getKey();\n      String value = (String) entry.getValue();\n      buffer.append(key).append(\"=\").append(value).append(\"&\");\n  }\n\n  // append the wechat key\n  buffer.append(\"key=\").append(wechatKey);\n\n  byte[] sign = digest.digest(buffer.toString().getBytes(\"UTF-8\"));\n\n  // convert the byte array to hex string\n  StringBuffer hexString = new StringBuffer();\n  for (int i=0; i < sign.length; i++) {\n      String hex = Integer.toHexString(0xff & sign[i]);\n      if (hex.length() == 1) {\n          hexString.append('0');\n      }\n      hexString.append(hex);\n  }\n\n  // the result string must be upper case\n  return hexString.toString().toUpperCase();\n}\n```\n","slug":"wechat_payment_adventure","published":1,"updated":"2017-01-10T15:40:13.000Z","_id":"cixr90u5m0003vas6kd33p468","comments":1,"photos":[],"link":"","content":"<p>之前一直听说微信支付的 API 是个坑货，坑到有专门的封装支付的平台。这次自己体验了一下，果然很坑。做个笔记。</p>\n<a id=\"more\"></a>\n<p>首先必须说一下，无论什么结果都返回 <code>200 OK</code> 是个很脑残的偷懒设计。</p>\n<p><strong>统一下单接口返回空</strong><br>在调试统一下单接口的时候，发现微信返回 <code>200 OK</code> 但是不会去调用回调接口。这就有点尴尬了。我一直以为接口调用是成功的，只是回调接口没配置好（必须是外网服务器，所以用了第三方的 tunnel）。然而无论怎么试，外网接口都是通的。随后看文档发现，如果调用成功是应该返回 success 的，而不是空。这才想到会不会调用就是失败的。仔细看了一下代码，发现 <code>Java POJO -&gt; XML</code> 的转化写的有问题。<code>XStream</code> 会自动给把下划线转义，变成俩下划线。而我为了简单，直接把 <code>POJO</code> 里的变量都按接口要求对应了（即按规范应该是 <code>totalFee</code> 的地方，都写了 <code>total_fee</code>）。重载了一下 <code>PrettyPrintWriter</code> 的 <code>encodeNode</code> 函数直接返回变量名，终于，看到返回内容了。</p>\n<p>坑点：失败了就不要返回 <code>200 OK</code> 嘛！返回 <code>200 OK</code> 也行，起码不要把错误扔掉嘛！另外，那个回调也并不是在统一下单接口调用的。文档写得不明不白。</p>\n<p><strong>统一下单接口签名错误</strong><br>我出的问题是签名时没有对字符串做正确的编码处理。简单说，MD5Digest 接收的是一个字节数组，需要将字符串转换一下，转换时需要加入编码参数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">byte[] sign = digest.digest(buffer.toString().getBytes()); // 老实说，这是一个非常弱智的错误</div><div class=\"line\">byte[] sign = digest.digest(buffer.toString().getBytes(&quot;UTF-8&quot;));</div></pre></td></tr></table></figure></p>\n<p>签名函数的主逻辑是这样的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * Signs the given parameters according to wechat payment unfiedorder protocol.</div><div class=\"line\"> *</div><div class=\"line\"> * @param params the request parameters, key and sign are not included</div><div class=\"line\"> *               neither are the null/empty values</div><div class=\"line\"> */</div><div class=\"line\">public String sign(SortedMap params) &#123;</div><div class=\"line\">  // combine the parameters to get the string to be signed on</div><div class=\"line\">  StringBuffer buffer = new StringBuffer();</div><div class=\"line\">  Iterator iterator = params.entrySet().iterator();</div><div class=\"line\">  while (iterator.hasNext()) &#123;</div><div class=\"line\">      Map.Entry entry = (Map.Entry) iterator.next();</div><div class=\"line\">      String key = (String) entry.getKey();</div><div class=\"line\">      String value = (String) entry.getValue();</div><div class=\"line\">      buffer.append(key).append(&quot;=&quot;).append(value).append(&quot;&amp;&quot;);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  // append the wechat key</div><div class=\"line\">  buffer.append(&quot;key=&quot;).append(wechatKey);</div><div class=\"line\"></div><div class=\"line\">  byte[] sign = digest.digest(buffer.toString().getBytes(&quot;UTF-8&quot;));</div><div class=\"line\"></div><div class=\"line\">  // convert the byte array to hex string</div><div class=\"line\">  StringBuffer hexString = new StringBuffer();</div><div class=\"line\">  for (int i=0; i &lt; sign.length; i++) &#123;</div><div class=\"line\">      String hex = Integer.toHexString(0xff &amp; sign[i]);</div><div class=\"line\">      if (hex.length() == 1) &#123;</div><div class=\"line\">          hexString.append(&apos;0&apos;);</div><div class=\"line\">      &#125;</div><div class=\"line\">      hexString.append(hex);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  // the result string must be upper case</div><div class=\"line\">  return hexString.toString().toUpperCase();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>之前一直听说微信支付的 API 是个坑货，坑到有专门的封装支付的平台。这次自己体验了一下，果然很坑。做个笔记。</p>","more":"<p>首先必须说一下，无论什么结果都返回 <code>200 OK</code> 是个很脑残的偷懒设计。</p>\n<p><strong>统一下单接口返回空</strong><br>在调试统一下单接口的时候，发现微信返回 <code>200 OK</code> 但是不会去调用回调接口。这就有点尴尬了。我一直以为接口调用是成功的，只是回调接口没配置好（必须是外网服务器，所以用了第三方的 tunnel）。然而无论怎么试，外网接口都是通的。随后看文档发现，如果调用成功是应该返回 success 的，而不是空。这才想到会不会调用就是失败的。仔细看了一下代码，发现 <code>Java POJO -&gt; XML</code> 的转化写的有问题。<code>XStream</code> 会自动给把下划线转义，变成俩下划线。而我为了简单，直接把 <code>POJO</code> 里的变量都按接口要求对应了（即按规范应该是 <code>totalFee</code> 的地方，都写了 <code>total_fee</code>）。重载了一下 <code>PrettyPrintWriter</code> 的 <code>encodeNode</code> 函数直接返回变量名，终于，看到返回内容了。</p>\n<p>坑点：失败了就不要返回 <code>200 OK</code> 嘛！返回 <code>200 OK</code> 也行，起码不要把错误扔掉嘛！另外，那个回调也并不是在统一下单接口调用的。文档写得不明不白。</p>\n<p><strong>统一下单接口签名错误</strong><br>我出的问题是签名时没有对字符串做正确的编码处理。简单说，MD5Digest 接收的是一个字节数组，需要将字符串转换一下，转换时需要加入编码参数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">byte[] sign = digest.digest(buffer.toString().getBytes()); // 老实说，这是一个非常弱智的错误</div><div class=\"line\">byte[] sign = digest.digest(buffer.toString().getBytes(&quot;UTF-8&quot;));</div></pre></td></tr></table></figure></p>\n<p>签名函数的主逻辑是这样的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * Signs the given parameters according to wechat payment unfiedorder protocol.</div><div class=\"line\"> *</div><div class=\"line\"> * @param params the request parameters, key and sign are not included</div><div class=\"line\"> *               neither are the null/empty values</div><div class=\"line\"> */</div><div class=\"line\">public String sign(SortedMap params) &#123;</div><div class=\"line\">  // combine the parameters to get the string to be signed on</div><div class=\"line\">  StringBuffer buffer = new StringBuffer();</div><div class=\"line\">  Iterator iterator = params.entrySet().iterator();</div><div class=\"line\">  while (iterator.hasNext()) &#123;</div><div class=\"line\">      Map.Entry entry = (Map.Entry) iterator.next();</div><div class=\"line\">      String key = (String) entry.getKey();</div><div class=\"line\">      String value = (String) entry.getValue();</div><div class=\"line\">      buffer.append(key).append(&quot;=&quot;).append(value).append(&quot;&amp;&quot;);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  // append the wechat key</div><div class=\"line\">  buffer.append(&quot;key=&quot;).append(wechatKey);</div><div class=\"line\"></div><div class=\"line\">  byte[] sign = digest.digest(buffer.toString().getBytes(&quot;UTF-8&quot;));</div><div class=\"line\"></div><div class=\"line\">  // convert the byte array to hex string</div><div class=\"line\">  StringBuffer hexString = new StringBuffer();</div><div class=\"line\">  for (int i=0; i &lt; sign.length; i++) &#123;</div><div class=\"line\">      String hex = Integer.toHexString(0xff &amp; sign[i]);</div><div class=\"line\">      if (hex.length() == 1) &#123;</div><div class=\"line\">          hexString.append(&apos;0&apos;);</div><div class=\"line\">      &#125;</div><div class=\"line\">      hexString.append(hex);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  // the result string must be upper case</div><div class=\"line\">  return hexString.toString().toUpperCase();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"2016 读书","date":"2016-12-18T13:47:00.000Z","layout":"true","_content":"\n2016年底的时候读了本年度最好的一本书，吴晓波的《腾讯传》。今年刘慈欣拿了雨果奖，随大流又把《三体》读了一遍。杂七杂八的书也读了一些，简单列个表。总的来说，休闲的书很少，基本都读的很有目的性很功利。\n\n<!-- more -->\n**上帝掷骰子吗？** **★★★★☆**\n用一种非常浅显易懂的解读方式描述了量子物理发展的过程。现在算是基本明白了相对论讲的是啥事儿。最后作者把物理学的本质引向了哲学，是出乎意料的一个结论。读的这一遍猎奇心态偏多，对其中的科学道理也还没有完全理解。明年再读一遍。\n\n**腾讯传** **★★★★☆**\n讲了好多之前听说过和没有听说过的故事。相信腾讯的成功不仅是运气的缘故，更多的是坚持和努力。另一方面，危机感真的很重要。\n\n**The Hard Thing about Hard Things** **★★★★☆**\n国内翻译成《创业维艰》。跟腾讯传相似，只不过这是主人公自己写的。基本上，创业是件很困难的事情，如果不是对成功有极大的渴望，尽量还是敬而远之。\n\n**思考，快与慢** **★★★☆☆**\n书是好书，但是太长太拖沓了。有点像托福红宝书，第一章总是最熟悉的。几次想看完都放弃了。\n\n**三体** **★★★★★**\n我读过的科幻书不多，《三体》是已读里面当之无愧的第一名。刘慈欣的脑洞真是无限大。\n\n**天龙八部** **★★★★☆**\n不记得是第几次读了，“无情不冤，有情皆孽”。武侠是一种类科幻的文体，只是哪怕是武侠中的圣人，金圣人，写出的东西也缺一点格局。这一点可对比牛逼美剧的编剧。\n\n**阿米巴经营** **★★★☆☆**\n一切以利润为导向。这个可能比较适合已经成规模的中大型企业。创业公司很难适用，如果腾讯或者 Facebook 都在创业初期就追求利润，可能互联网格局也就不是今天这个样子了。\n\n**雷军：人因梦想而伟大** **★★☆☆☆**\n捧臭脚文，就那么几件事情颠三倒四翻来覆去地说。\n\n**创业非头条：16为硅谷科技新贵的成功法则** **★★☆☆☆**\n故事会类型的读物，猎奇可以，深度几乎没有。\n","source":"_posts/Look-Back-2016-read.md","raw":"---\ntitle: \"2016 读书\"\ndate: 2016-12-18 21:47:00\ntags: [reading, life]\nlayout: true\n---\n\n2016年底的时候读了本年度最好的一本书，吴晓波的《腾讯传》。今年刘慈欣拿了雨果奖，随大流又把《三体》读了一遍。杂七杂八的书也读了一些，简单列个表。总的来说，休闲的书很少，基本都读的很有目的性很功利。\n\n<!-- more -->\n**上帝掷骰子吗？** **★★★★☆**\n用一种非常浅显易懂的解读方式描述了量子物理发展的过程。现在算是基本明白了相对论讲的是啥事儿。最后作者把物理学的本质引向了哲学，是出乎意料的一个结论。读的这一遍猎奇心态偏多，对其中的科学道理也还没有完全理解。明年再读一遍。\n\n**腾讯传** **★★★★☆**\n讲了好多之前听说过和没有听说过的故事。相信腾讯的成功不仅是运气的缘故，更多的是坚持和努力。另一方面，危机感真的很重要。\n\n**The Hard Thing about Hard Things** **★★★★☆**\n国内翻译成《创业维艰》。跟腾讯传相似，只不过这是主人公自己写的。基本上，创业是件很困难的事情，如果不是对成功有极大的渴望，尽量还是敬而远之。\n\n**思考，快与慢** **★★★☆☆**\n书是好书，但是太长太拖沓了。有点像托福红宝书，第一章总是最熟悉的。几次想看完都放弃了。\n\n**三体** **★★★★★**\n我读过的科幻书不多，《三体》是已读里面当之无愧的第一名。刘慈欣的脑洞真是无限大。\n\n**天龙八部** **★★★★☆**\n不记得是第几次读了，“无情不冤，有情皆孽”。武侠是一种类科幻的文体，只是哪怕是武侠中的圣人，金圣人，写出的东西也缺一点格局。这一点可对比牛逼美剧的编剧。\n\n**阿米巴经营** **★★★☆☆**\n一切以利润为导向。这个可能比较适合已经成规模的中大型企业。创业公司很难适用，如果腾讯或者 Facebook 都在创业初期就追求利润，可能互联网格局也就不是今天这个样子了。\n\n**雷军：人因梦想而伟大** **★★☆☆☆**\n捧臭脚文，就那么几件事情颠三倒四翻来覆去地说。\n\n**创业非头条：16为硅谷科技新贵的成功法则** **★★☆☆☆**\n故事会类型的读物，猎奇可以，深度几乎没有。\n","slug":"Look-Back-2016-read","published":1,"updated":"2016-12-25T18:54:14.000Z","comments":1,"photos":[],"link":"","_id":"cixr90u5n0004vas6ygc7x99i","content":"<p>2016年底的时候读了本年度最好的一本书，吴晓波的《腾讯传》。今年刘慈欣拿了雨果奖，随大流又把《三体》读了一遍。杂七杂八的书也读了一些，简单列个表。总的来说，休闲的书很少，基本都读的很有目的性很功利。</p>\n<a id=\"more\"></a>\n<p><strong>上帝掷骰子吗？</strong> <strong>★★★★☆</strong><br>用一种非常浅显易懂的解读方式描述了量子物理发展的过程。现在算是基本明白了相对论讲的是啥事儿。最后作者把物理学的本质引向了哲学，是出乎意料的一个结论。读的这一遍猎奇心态偏多，对其中的科学道理也还没有完全理解。明年再读一遍。</p>\n<p><strong>腾讯传</strong> <strong>★★★★☆</strong><br>讲了好多之前听说过和没有听说过的故事。相信腾讯的成功不仅是运气的缘故，更多的是坚持和努力。另一方面，危机感真的很重要。</p>\n<p><strong>The Hard Thing about Hard Things</strong> <strong>★★★★☆</strong><br>国内翻译成《创业维艰》。跟腾讯传相似，只不过这是主人公自己写的。基本上，创业是件很困难的事情，如果不是对成功有极大的渴望，尽量还是敬而远之。</p>\n<p><strong>思考，快与慢</strong> <strong>★★★☆☆</strong><br>书是好书，但是太长太拖沓了。有点像托福红宝书，第一章总是最熟悉的。几次想看完都放弃了。</p>\n<p><strong>三体</strong> <strong>★★★★★</strong><br>我读过的科幻书不多，《三体》是已读里面当之无愧的第一名。刘慈欣的脑洞真是无限大。</p>\n<p><strong>天龙八部</strong> <strong>★★★★☆</strong><br>不记得是第几次读了，“无情不冤，有情皆孽”。武侠是一种类科幻的文体，只是哪怕是武侠中的圣人，金圣人，写出的东西也缺一点格局。这一点可对比牛逼美剧的编剧。</p>\n<p><strong>阿米巴经营</strong> <strong>★★★☆☆</strong><br>一切以利润为导向。这个可能比较适合已经成规模的中大型企业。创业公司很难适用，如果腾讯或者 Facebook 都在创业初期就追求利润，可能互联网格局也就不是今天这个样子了。</p>\n<p><strong>雷军：人因梦想而伟大</strong> <strong>★★☆☆☆</strong><br>捧臭脚文，就那么几件事情颠三倒四翻来覆去地说。</p>\n<p><strong>创业非头条：16为硅谷科技新贵的成功法则</strong> <strong>★★☆☆☆</strong><br>故事会类型的读物，猎奇可以，深度几乎没有。</p>\n","excerpt":"<p>2016年底的时候读了本年度最好的一本书，吴晓波的《腾讯传》。今年刘慈欣拿了雨果奖，随大流又把《三体》读了一遍。杂七杂八的书也读了一些，简单列个表。总的来说，休闲的书很少，基本都读的很有目的性很功利。</p>","more":"<p><strong>上帝掷骰子吗？</strong> <strong>★★★★☆</strong><br>用一种非常浅显易懂的解读方式描述了量子物理发展的过程。现在算是基本明白了相对论讲的是啥事儿。最后作者把物理学的本质引向了哲学，是出乎意料的一个结论。读的这一遍猎奇心态偏多，对其中的科学道理也还没有完全理解。明年再读一遍。</p>\n<p><strong>腾讯传</strong> <strong>★★★★☆</strong><br>讲了好多之前听说过和没有听说过的故事。相信腾讯的成功不仅是运气的缘故，更多的是坚持和努力。另一方面，危机感真的很重要。</p>\n<p><strong>The Hard Thing about Hard Things</strong> <strong>★★★★☆</strong><br>国内翻译成《创业维艰》。跟腾讯传相似，只不过这是主人公自己写的。基本上，创业是件很困难的事情，如果不是对成功有极大的渴望，尽量还是敬而远之。</p>\n<p><strong>思考，快与慢</strong> <strong>★★★☆☆</strong><br>书是好书，但是太长太拖沓了。有点像托福红宝书，第一章总是最熟悉的。几次想看完都放弃了。</p>\n<p><strong>三体</strong> <strong>★★★★★</strong><br>我读过的科幻书不多，《三体》是已读里面当之无愧的第一名。刘慈欣的脑洞真是无限大。</p>\n<p><strong>天龙八部</strong> <strong>★★★★☆</strong><br>不记得是第几次读了，“无情不冤，有情皆孽”。武侠是一种类科幻的文体，只是哪怕是武侠中的圣人，金圣人，写出的东西也缺一点格局。这一点可对比牛逼美剧的编剧。</p>\n<p><strong>阿米巴经营</strong> <strong>★★★☆☆</strong><br>一切以利润为导向。这个可能比较适合已经成规模的中大型企业。创业公司很难适用，如果腾讯或者 Facebook 都在创业初期就追求利润，可能互联网格局也就不是今天这个样子了。</p>\n<p><strong>雷军：人因梦想而伟大</strong> <strong>★★☆☆☆</strong><br>捧臭脚文，就那么几件事情颠三倒四翻来覆去地说。</p>\n<p><strong>创业非头条：16为硅谷科技新贵的成功法则</strong> <strong>★★☆☆☆</strong><br>故事会类型的读物，猎奇可以，深度几乎没有。</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cixr90u590000vas6hkig604o","tag_id":"cixr90u5i0002vas67hnldz3z","_id":"cixr90u600009vas6okxlat3m"},{"post_id":"cixr90u590000vas6hkig604o","tag_id":"cixr90u5r0005vas61z2vfdkw","_id":"cixr90u60000avas60p6tf9vg"},{"post_id":"cixr90u590000vas6hkig604o","tag_id":"cixr90u5t0006vas6qroshruz","_id":"cixr90u61000cvas69sju1123"},{"post_id":"cixr90u590000vas6hkig604o","tag_id":"cixr90u5v0007vas6e015y25s","_id":"cixr90u61000dvas6ko0h9nlv"},{"post_id":"cixr90u5e0001vas6zyk1wbew","tag_id":"cixr90u5r0005vas61z2vfdkw","_id":"cixr90u62000fvas6uslhro43"},{"post_id":"cixr90u5m0003vas6kd33p468","tag_id":"cixr90u5r0005vas61z2vfdkw","_id":"cixr90u62000gvas6tya1du6x"},{"post_id":"cixr90u5n0004vas6ygc7x99i","tag_id":"cixr90u5t0006vas6qroshruz","_id":"cixr90u63000hvas6b8key74v"},{"post_id":"cixr90u5n0004vas6ygc7x99i","tag_id":"cixr90u5i0002vas67hnldz3z","_id":"cixr90u63000ivas6r8u5o1gy"}],"Tag":[{"name":"life","_id":"cixr90u5i0002vas67hnldz3z"},{"name":"tech","_id":"cixr90u5r0005vas61z2vfdkw"},{"name":"reading","_id":"cixr90u5t0006vas6qroshruz"},{"name":"lego","_id":"cixr90u5v0007vas6e015y25s"}]}}